@echo off

set "VSCMD_START_DIR=%CD%"
call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat"

set tools_dir=tools
set bh=%tools_dir%\bin2hex.exe
set bh_cpp=%tools_dir%\bin2hex.c
if not exist %bh% (
    cl.exe /EHsc /nologo /Fe%tools_dir%\ /Fo%tools_dir%\ %bh_cpp%
)

set bs=%tools_dir%\bindshader.exe
set bs_cpp=%tools_dir%\bindshader.c
if not exist %bs% (
    cl.exe /EHsc /nologo /Fe%tools_dir%\ /Fo%tools_dir%\ %bs_cpp%
)

set PATH=%tools_dir%;%PATH%

set glsl=glsl\
set cl=%VULKAN_SDK%\Bin\glslangValidator.exe
set tmpf=spirv\data.spv
set outf=+spirv\shader_data.c
set outfb=+spirv\shader_binding.c

echo %bh%

mkdir spirv

del /Q spirv\shader_data.c
del /Q spirv\shader_binding.c
del /Q "%tmpf%"

@rem compile individual shaders

for %%f in (%glsl%*.vert) do (
    "%cl%" -S vert -V -o "%tmpf%" "%%f"
    "%bh%" "%tmpf%" %outf% %%~nf_vert_spv
    del /Q "%tmpf%"
)

for %%f in (%glsl%*.frag) do (
    "%cl%" -S frag -V -o "%tmpf%" "%%f"
    "%bh%" "%tmpf%" %outf% %%~nf_frag_spv
    del /Q "%tmpf%"
)

@rem single-texture fragment, depth-fragment

"%cl%" -S frag -V -o "%tmpf%" %glsl%gen_frag.tmpl -DUSE_CLX_IDENT -DUSE_ATEST -DUSE_DF
"%bh%" "%tmpf%" %outf% frag_tx0_df

@rem compile lighting shader variations from templates

"%cl%" -S vert -V -o "%tmpf%" %glsl%light_vert.tmpl
"%bh%" "%tmpf%" %outf% vert_light

"%cl%" -S vert -V -o "%tmpf%" %glsl%light_vert.tmpl -DUSE_FOG
"%bh%" "%tmpf%" %outf% vert_light_fog

"%cl%" -S frag -V -o "%tmpf%" %glsl%light_frag.tmpl
"%bh%" "%tmpf%" %outf% frag_light

"%cl%" -S frag -V -o "%tmpf%" %glsl%light_frag.tmpl -DUSE_FOG 
"%bh%" "%tmpf%" %outf% frag_light_fog

"%cl%" -S frag -V -o "%tmpf%" %glsl%light_frag.tmpl -DUSE_LINE
"%bh%" "%tmpf%" %outf% frag_light_line

"%cl%" -S frag -V -o "%tmpf%" %glsl%light_frag.tmpl -DUSE_LINE -DUSE_FOG
"%bh%" "%tmpf%" %outf% frag_light_line_fog

@rem template shader identifiers and flags
set "vbo[0]="
set "vbo[1]=-DUSE_VBO_GHOUL2"
set "vbo[2]=-DUSE_VBO_MDV"
set "vbo_id[0]=cpu_"
set "vbo_id[1]=gpu_ghoul2_"
set "vbo_id[2]=gpu_mdv_"

set "tx[0]="
set "tx[1]=-DUSE_TX1"
set "tx[2]=-DUSE_TX2"
set "tx_id[0]=tx0"
set "tx_id[1]=tx1"
set "tx_id[2]=tx2"

set "cl[1]=-DUSE_CL1"
set "cl[2]=-DUSE_CL2"
set "cl_id[1]=cl"
set "cl_id[2]=cl"

set "env[0]="
set "env[1]=-DUSE_ENV"
set "env_id[0]="
set "env_id[1]=_env"

set "fog[0]="
set "fog[1]=-DUSE_FOG"
set "fog_id[0]="
set "fog_id[1]=_fog"

SETLOCAL EnableDelayedExpansion

@rem begin autogenerated shader binding generation
"%bs%" %outfb% "// this file is autogenerated during shader compilation"
"%bs%" %outfb% "static void vk_set_shader_name( VkShaderModule shader, const char *name ) {"
"%bs%" %outfb% "    VK_SET_OBJECT_NAME( shader, name, VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT );"
"%bs%" %outfb% "}"

"%bs%" %outfb% "void vk_bind_generated_shaders( void ){"

@rem compile shader variations from templates
@rem vertex shader
for /L %%i in ( 0,1,2 ) do (                @rem vbo ( 0:none 1:ghoul2 2:mdv/md3 )
    call :compile_refraction_vertex_shader %%i

    for /L %%j in ( 0,1,2 ) do (            @rem tx   
        for /L %%k in ( 0,1,1 ) do (        @rem +env
            for /L %%m in ( 0,1,1 ) do (    @rem +fog
                call :compile_generic_vertex_shader %%i, %%j, %%k, %%m

                if %%j lss 2 (  @rem skip tx2 for ident and fixed
                   call :compile_ident1_vertex_shader %%i, %%j, %%k, %%m
                   call :compile_fixed_vertex_shader %%i, %%j, %%k, %%m
                )
            )
        )
    )
)

@rem fragment shader
for /L %%i in ( 0,1,2 ) do (                @rem vbo ( 0:none 1:ghoul2 2:mdv/md3 )
    for /L %%j in ( 0,1,2 ) do (            @rem tx 
        for /L %%k in ( 0,1,1 ) do (        @rem +fog
            call :compile_generic_fragment_shader %%i, %%j, %%k

            if %%j lss 2 (  @rem skip tx2 for ident and fixed
                call :compile_ident1_fragment_shader %%i, %%j, %%k
                call :compile_fixed_fragment_shader %%i, %%j, %%k
            )
        )
    )
)

del /Q "%tmpf%"

"%bs%" %outfb% "}"

pause


@rem refraction shaders
:compile_refraction_vertex_shader
    "%cl%" -S vert -V -o "%tmpf%" %glsl%refraction.tmpl !vbo[%1]!
    "%bh%" "%tmpf%" %outf% refraction_!vbo_id[%1]!
    "%bs%" %outfb% "    vk.shaders.refraction_vs[%1] = SHADER_MODULE( refraction_!vbo_id[%1]! );"
	"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.refraction_vs[%1], ""refraction_!vbo_id[%1]!"" );"
exit /B

@rem identity shaders
:compile_ident1_vertex_shader
    "%cl%" -S vert -V -o "%tmpf%" %glsl%gen_vert.tmpl -DUSE_CLX_IDENT !vbo[%1]! !tx[%2]! !env[%3]! !fog[%4]!
    "%bh%" "%tmpf%" %outf% vert_!vbo_id[%1]!!tx_id[%2]!_ident1!env_id[%3]!!fog_id[%4]!
    "%bs%" %outfb% "    vk.shaders.vert.ident1[%1][%2][%3][%4] = SHADER_MODULE( vert_!vbo_id[%1]!!tx_id[%2]!_ident1!env_id[%3]!!fog_id[%4]! );"
	"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.vert.ident1[%1][%2][%3][%4], ""vert_!vbo_id[%1]!!tx_id[%2]!_ident1!env_id[%3]!!fog_id[%4]!"" );"
exit /B

:compile_ident1_fragment_shader
    set "flags=!vbo[%1]! !tx[%2]! !fog[%3]!"
    set "name=!vbo_id[%1]!!tx_id[%2]!_ident1!fog_id[%3]!"
    if %2 equ 0 ( set "flags=%flags% -DUSE_ATEST" )

    "%cl%" -S frag -V -o "%tmpf%" %glsl%gen_frag.tmpl -DUSE_CLX_IDENT %flags%
    "%bh%" "%tmpf%" %outf% frag_%name%
	"%bs%" %outfb% "    vk.shaders.frag.ident1[%1][%2][%3] = SHADER_MODULE( frag_%name% );"
	"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.frag.ident1[%1][%2][%3], ""frag_%name%"" );"
exit /B



@rem fixed shaders
:compile_fixed_vertex_shader
    "%cl%" -S vert -V -o "%tmpf%" %glsl%gen_vert.tmpl -DUSE_FIXED_COLOR !vbo[%1]! !tx[%2]! !env[%3]! !fog[%4]!
    "%bh%" "%tmpf%" %outf% vert_!vbo_id[%1]!!tx_id[%2]!_fixed!env_id[%3]!!fog_id[%4]!
	
    "%bs%" %outfb% "    vk.shaders.vert.fixed[%1][%2][%3][%4] = SHADER_MODULE( vert_!vbo_id[%1]!!tx_id[%2]!_fixed!env_id[%3]!!fog_id[%4]! );"
	"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.vert.fixed[%1][%2][%3][%4], ""vert_!vbo_id[%1]!!tx_id[%2]!_fixed!env_id[%3]!!fog_id[%4]!"" );"
exit /B

:compile_fixed_fragment_shader
    set "flags=!vbo[%1]! !tx[%2]! !fog[%3]!"
    set "name=!vbo_id[%1]!!tx_id[%2]!_fixed!fog_id[%3]!"
    if %2 equ 0 ( set "flags=%flags% -DUSE_ATEST" )

    "%cl%" -S frag -V -o "%tmpf%" %glsl%gen_frag.tmpl -DUSE_FIXED_COLOR %flags%
    "%bh%" "%tmpf%" %outf% frag_%name%
	"%bs%" %outfb% "    vk.shaders.frag.fixed[%1][%2][%3] = SHADER_MODULE( frag_%name% );"
	"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.frag.fixed[%1][%2][%3], ""frag_%name%"" );"
exit /B



@rem generic shaders
:compile_generic_vertex_shader
    "%cl%" -S vert -V -o "%tmpf%" %glsl%gen_vert.tmpl !vbo[%1]! !tx[%2]! !env[%3]! !fog[%4]!
    "%bh%" "%tmpf%" %outf% vert_!vbo_id[%1]!!tx_id[%2]!!env_id[%3]!!fog_id[%4]!
	"%bs%" %outfb% "    vk.shaders.vert.gen[%1][%2][0][%3][%4] = SHADER_MODULE( vert_!vbo_id[%1]!!tx_id[%2]!!env_id[%3]!!fog_id[%4]! );"
	"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.vert.gen[%1][%2][0][%3][%4], ""vert_!vbo_id[%1]!!tx_id[%2]!!env_id[%3]!!fog_id[%4]!"" );"

    @rem +cl
    if %2 equ 0 goto continue
        "%cl%" -S vert -V -o "%tmpf%" %glsl%gen_vert.tmpl !vbo[%1]! !tx[%2]! !cl[%2]! !env[%3]! !fog[%4]!
        "%bh%" "%tmpf%" %outf% vert_!vbo_id[%1]!!tx_id[%2]!_!cl_id[%2]!!env_id[%3]!!fog_id[%4]!
	    "%bs%" %outfb% "    vk.shaders.vert.gen[%1][%2][1][%3][%4] = SHADER_MODULE( vert_!vbo_id[%1]!!tx_id[%2]!_!cl_id[%2]!!env_id[%3]!!fog_id[%4]! );"
	    "%bs%" %outfb% "    vk_set_shader_name( vk.shaders.vert.gen[%1][%2][1][%3][%4], ""vert_!vbo_id[%1]!!tx_id[%2]!_!cl_id[%2]!!env_id[%3]!!fog_id[%4]!"" );"
    :continue
exit /B

:compile_generic_fragment_shader
    set "flags=!vbo[%1]! !tx[%2]! !fog[%3]!"
    set "name=!vbo_id[%1]!!tx_id[%2]!!fog_id[%3]!"
    if %2 equ 0 ( set "flags=%flags% -DUSE_ATEST" )

    "%cl%" -S frag -V -o "%tmpf%" %glsl%gen_frag.tmpl %flags%
    "%bh%" "%tmpf%" %outf% frag_%name%
	"%bs%" %outfb% "    vk.shaders.frag.gen[%1][%2][0][%3] = SHADER_MODULE( frag_%name% );"
	"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.frag.gen[%1][%2][0][%3], ""frag_%name%"" );"

    @rem +cl
    if %2 equ 0 goto continue
        "%cl%" -S frag -V -o "%tmpf%" %glsl%gen_frag.tmpl !vbo[%1]! !tx[%2]! !cl[%2]! !fog[%3]!
        "%bh%" "%tmpf%" %outf% frag_!vbo_id[%1]!!tx_id[%2]!_!cl_id[%2]!!fog_id[%3]!
		"%bs%" %outfb% "    vk.shaders.frag.gen[%1][%2][1][%3] = SHADER_MODULE( frag_!vbo_id[%1]!!tx_id[%2]!_!cl_id[%2]!!fog_id[%3]! );"
		"%bs%" %outfb% "    vk_set_shader_name( vk.shaders.frag.gen[%1][%2][1][%3], ""frag_!vbo_id[%1]!!tx_id[%2]!_!cl_id[%2]!!fog_id[%3]!"" );"
    :continue
exit /B