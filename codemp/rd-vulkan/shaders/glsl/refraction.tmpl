#version 450

#define M_PI 3.1415926535897932384626433832795

// 64 bytes
layout(push_constant) uniform Transform {
	mat4 mvp;
};

struct tcMod_t {
	vec4	matrix;
	vec4	offTurb;
};

struct tcGen_t {
	vec3	vector0;
	vec3	vector1;
	int		type;
};

layout(set = 1, binding = 0) uniform UBO {
	// light/env/material parameters:
	vec4 eyePos;
	vec4 lightPos;
	vec4 lightColor;
	vec4 lightVector;
	
#if !defined(USE_VBO_GHOUL2) && !defined(USE_VBO_MDV)
	// refraction parameters:
	tcMod_t u_tcMod;
	tcGen_t u_tcGen;

	// entity
	mat4	u_ModelMatrix;
#endif
};

#if defined(USE_VBO_GHOUL2) || defined(USE_VBO_MDV)
struct vkBundle_t {
	vec4	baseColor;
	vec4	vertColor;
	tcMod_t	tcMod;
	tcGen_t	tcGen;
	int		rgbGen;
	int		alphaGen;
	int		numTexMods;
};

struct vkDisintegration_t {
	vec3	origin;
	float	threshold;
};

struct vkDeform_t {
	float	base;
	float	amplitude;
	float	phase;
	float	frequency;

	vec3	vector;
	float	time;

	int		type;
	int		func;
};

layout(set = 1, binding = 1) uniform UBOG2 {
	vec4 u_localViewOrigin;
	vec4 ambientLight;
	vec4 directedLight;
	vec4 lightDir;

	vkBundle_t			u_bundle[3];
	vkDisintegration_t	u_disintegration;
	vkDeform_t			u_deform;

	float	u_portalRange;

	mat4 u_ModelMatrix;
};	
#endif

#if defined(USE_VBO_GHOUL2)
layout(set = 1, binding = 2) uniform Bones {
	mat3x4 u_BoneMatrices[72];
};

layout(location = 8) in uvec4 in_bones;
layout(location = 9) in vec4 in_weights;

mat4x3 GetBoneMatrix(uint index)
{
	mat3x4 bone = u_BoneMatrices[index];
	return mat4x3(
		bone[0].x, bone[1].x, bone[2].x,
		bone[0].y, bone[1].y, bone[2].y,
		bone[0].z, bone[1].z, bone[2].z,
		bone[0].w, bone[1].w, bone[2].w);
}
#endif

layout(location = 0) in vec3 in_position;
#if !defined(USE_VBO_GHOUL2) && !defined(USE_VBO_MDV)
	layout(location = 1) in vec4 in_color;
#endif
layout(location = 2) in vec2 in_tex_coord0;
layout(location = 5) in vec3 in_normal;

layout(location = 0) out vec4 frag_color;
layout(location = 1) out vec4 var_RefractPosR;
layout(location = 2) out vec4 var_RefractPosG;
layout(location = 3) out vec4 var_RefractPosB;

out gl_PerVertex {
	vec4 gl_Position;
};

const float etaR = 1.0 / 1.35;
const float etaG = 1.0 / 1.20;
const float etaB = 1.0 / 1.05;


#if defined(USE_VBO_GHOUL2) || defined(USE_VBO_MDV)
vec4 CalcColor( int index, in vec3 position, in vec3 normal ) {
	vec4 color = ( u_bundle[index].vertColor * vec4( 0.0 ) ) + u_bundle[index].baseColor;		// skip vertColor?

	switch ( u_bundle[index].rgbGen ) {
		case 14:// CGEN_DISINTEGRATION_1
		{
			vec3 delta = u_disintegration.origin - position;
			float sqrDistance = dot( delta, delta );

			if ( sqrDistance < u_disintegration.threshold )
				color *= 0.0;
			else if ( sqrDistance < u_disintegration.threshold + 60.0 )
				color *= vec4( 0.0, 0.0, 0.0, 1.0 );
			else if ( sqrDistance < u_disintegration.threshold + 150.0 )
				color *= vec4( 0.435295, 0.435295, 0.435295, 1.0 );
			else if ( sqrDistance < u_disintegration.threshold + 180.0 )
				color *= vec4( 0.6862745, 0.6862745, 0.6862745, 1.0 );

			return color;
		}
		case 15:// CGEN_DISINTEGRATION_2
		{
			vec3 delta = u_disintegration.origin - position;
			float sqrDistance = dot( delta, delta );

			if ( sqrDistance < u_disintegration.threshold )
				return vec4(0.0);

			return color;
		}
	}

	switch ( u_bundle[index].alphaGen ) {
		case 6: // AGEN_LIGHTING_SPECULAR
		{
			vec3 viewer = normalize( u_localViewOrigin.xyz - position );
			vec3 lightDirection = ( transpose(u_ModelMatrix) * vec4( lightDir.xyz, 0.0 ) ).xyz;
			vec3 reflected = -reflect( lightDirection, normal );
			color.a = clamp( dot( reflected, normalize( viewer ) ), 0.0, 1.0 );
			color.a *= color.a;
			color.a *= color.a;
			break;
		}
		case 8: // AGEN_PORTAL
		{
			vec3 viewer = normalize( u_localViewOrigin.xyz - position );
			color.a = clamp( length( viewer ) / u_portalRange, 0.0, 1.0 );
			break;
		}
	}

	return color;
}

float GetNoiseValue( float x, float y, float z, float t )
{
	// Variation on the 'one-liner random function'.
	// Not sure if this is still 'correctly' random
	return fract( sin( dot(
		vec4( x, y, z, t ),
		vec4( 12.9898, 78.233, 12.9898, 78.233 )
	)) * 43758.5453 );
}

float CalculateDeformScale( in int func, in float time, in float phase, in float frequency )
{
	float value = phase + time * frequency;

	switch ( func ) {
		case 1: // GF_SIN
			return sin(value * 2.0 * M_PI);
		case 2: // GF_SQUARE
			return sign(0.5 - fract(value));
		case 3: // GF_TRIANGLE
			return abs(fract(value + 0.75) - 0.5) * 4.0 - 1.0;
		case 4: // GF_SAWTOOTH
			return fract(value);
		case 5:	// GF_INVERSE_SAWTOOTH
			return 1.0 - fract(value);
		default:// GF_NONE
			return 0.0;
	}
}

vec3 DeformPosition( const vec3 pos, const vec3 normal, const vec2 st )
{
	switch ( u_deform.type ) {
		default:
		{
			return pos;
		}

		case 3: // DEFORM_BULGE
		{
			float bulgeHeight	= u_deform.amplitude;
			float bulgeWidth	= u_deform.phase;
			float bulgeSpeed	= u_deform.frequency;

			float scale = CalculateDeformScale( 1, u_deform.time, bulgeWidth * st.x, bulgeSpeed );

			return pos + normal * scale * bulgeHeight;
		}

		case 4: // DEFORM_BULGE_UNIFORM
		{
			float bulgeHeight = u_deform.amplitude;

			return pos + normal * bulgeHeight;
		}

		case 1: // DEFORM_WAVE
		{
			float base		= u_deform.base;
			float amplitude = u_deform.amplitude;
			float phase		= u_deform.phase;
			float frequency = u_deform.frequency;
			float spread	= u_deform.vector.x;

			float offset = dot( pos.xyz, vec3( spread ) );
			float scale = CalculateDeformScale( u_deform.func, u_deform.time, phase + offset, frequency );

			return pos + normal * (base + scale * amplitude);
		}

		case 5: // DEFORM_MOVE
		{
			float base		= u_deform.base;
			float amplitude = u_deform.amplitude;
			float phase		= u_deform.phase;
			float frequency = u_deform.frequency;
			vec3 direction	= u_deform.vector;

			float scale = CalculateDeformScale( u_deform.func, u_deform.time, phase, frequency );

			return pos + direction * (base + scale * amplitude);
		}

		case 6: // DEFORM_PROJECTION_SHADOW
		{
			vec3 ground = vec3(
				u_deform.base,
				u_deform.amplitude,
				u_deform.phase
			);

			float groundDist	= u_deform.frequency;
			vec3 lightDir		= u_deform.vector;

			float d = 1.0 / dot( lightDir, ground );
			vec3 lightPos = lightDir * d;
			return pos - lightPos * (dot( pos, ground ) + groundDist);
		}

		case 17: // DEFORM_DISINTEGRATION
		{
			vec3 delta = u_disintegration.origin - pos;
			float sqrDistance = dot(delta, delta);
			vec3 normalScale = vec3(-0.01);
			if ( sqrDistance < u_disintegration.threshold )
			{
				normalScale = vec3(2.0, 2.0, 0.5);
			}
			else if ( sqrDistance < u_disintegration.threshold + 50 )
			{
				normalScale = vec3(1.0, 1.0, 0.0);
			}
			return pos + normal * normalScale;
		}
	}
}

vec3 DeformNormal( const in vec3 position, const in vec3 normal )
{
	if ( u_deform.type != 2 ) // DEFORM_NORMALS
		return normal;

	float amplitude = u_deform.amplitude;
	float frequency = u_deform.frequency;

	vec3 outNormal = normal;
	const float scale = 0.98;
	
	outNormal.x += amplitude * GetNoiseValue(
		position.x * scale,
		position.y * scale,
		position.z * scale,
		u_deform.time * frequency );

	outNormal.y += amplitude * GetNoiseValue(
		100.0 * position.x * scale,
		position.y * scale,
		position.z * scale,
		u_deform.time * frequency );

	outNormal.z += amplitude * GetNoiseValue(
		200.0 * position.x * scale,
		position.y * scale,
		position.z * scale,
		u_deform.time * frequency );

	return outNormal;
}
#endif

vec2 GenTexCoords(int TCGen, vec3 position, vec3 normal, vec3 TCGenVector0, vec3 TCGenVector1)
{
	vec2 tex = in_tex_coord0.st;

	if ( TCGen == 9 ) // TCGEN_VECTOR
		tex = vec2(dot(position, TCGenVector0), dot(position, TCGenVector1));

	return tex;
}

vec2 ModTexCoords(vec2 st, vec3 position, vec4 texMatrix, vec4 offTurb)
{
	float amplitude = offTurb.z;
	float phase = offTurb.w * 2.0 * M_PI;
	vec2 st2;
	st2.x = st.x * texMatrix.x + (st.y * texMatrix.z + offTurb.x);
	st2.y = st.x * texMatrix.y + (st.y * texMatrix.w + offTurb.y);

	vec2 offsetPos = vec2(position.x + position.z, position.y);
	
	vec2 texOffset = sin(offsetPos * (2.0 * M_PI / 1024.0) + vec2(phase));
	
	return st2 + texOffset * amplitude;	
}

void main() {

#if defined(USE_VBO_MDV)
	vec3 position = in_position;
	vec3 normal = normalize(in_normal);
	//vec3 normal = normalize(in_normal - vec3(0.5));

	if ( u_deform.type != 0 ){ // !DEFORM_NONE
		position	= DeformPosition( position, normal, in_tex_coord0 );
		normal		= DeformNormal( position, normal );
	}
#elif defined(USE_VBO_GHOUL2)
	mat4x3 skin_matrix =
		GetBoneMatrix(in_bones.x) * in_weights.x +
        GetBoneMatrix(in_bones.y) * in_weights.y +
        GetBoneMatrix(in_bones.z) * in_weights.z +
        GetBoneMatrix(in_bones.w) * in_weights.w;

	vec3 position = skin_matrix * vec4(in_position, 1.0);
	vec3 normal = normalize(skin_matrix * vec4(in_normal, 0.0));
	//vec3 normal = normalize(skin_matrix * vec4(in_normal - vec3(0.5), 0.0));

	if ( u_deform.type != 0 ){ // !DEFORM_NONE
		position	= DeformPosition( position, normal, in_tex_coord0 );
		normal		= DeformNormal( position, normal );
	}
#else
	vec3 position = in_position;
	vec3 normal = in_normal;
	//vec3 normal = in_normal * 2.0 - vec3(1.0);
#endif

	gl_Position = mvp * vec4(position, 1.0);

	#if defined(USE_VBO_GHOUL2) || defined(USE_VBO_MDV)
		frag_color = CalcColor( 0, position, normal );

		vec2 tex			= GenTexCoords( u_bundle[0].tcGen.type, position, normal, u_bundle[0].tcGen.vector0, u_bundle[0].tcGen.vector1 );
		vec2 var_DiffuseTex = ModTexCoords( tex, position, u_bundle[0].tcMod.matrix, u_bundle[0].tcMod.offTurb );

	#else
		frag_color = in_color;

		vec2 tex			= GenTexCoords( u_tcGen.type, position, normal, u_tcGen.vector0, u_tcGen.vector1 );
		vec2 var_DiffuseTex = ModTexCoords( tex, position, u_tcMod.matrix, u_tcMod.offTurb );
	#endif

	vec3 ws_Position	= mat3(u_ModelMatrix) * position;
	vec3 ws_Normal		= normalize(mat3(u_ModelMatrix) * normal);
	vec3 ws_ViewDir		= (vec3(0.0) + vec3(0.0) * -gl_Position.x) + vec3(0.0) * gl_Position.y;
	//vec3 ws_ViewDir	= (u_ViewForward.xyz + u_ViewLeft.xyz * gl_Position.x) + u_ViewUp.xyz * gl_Position.y;

	float distance = 10.0 * clamp(1.0 - (distance(tex, var_DiffuseTex)), 0.0, 1.0);

	mat3 inverseModel = inverse(mat3(u_ModelMatrix));

	vec3 refraction_vec = normalize(refract(ws_ViewDir, ws_Normal, etaR));
	vec3 new_pos = (distance * refraction_vec) + ws_Position;
	var_RefractPosR = vec4(inverseModel * new_pos, 1.0);
	var_RefractPosR = mvp * var_RefractPosR;
	
	refraction_vec = normalize(refract(ws_ViewDir, ws_Normal, etaG));
	new_pos = (distance * refraction_vec) + ws_Position;
	var_RefractPosG = vec4(inverseModel * new_pos, 1.0);
	var_RefractPosG = mvp * var_RefractPosG;
	
	refraction_vec = normalize(refract(ws_ViewDir, ws_Normal, etaB));
	new_pos = (distance * refraction_vec) + ws_Position;
	var_RefractPosB = vec4(inverseModel * new_pos, 1.0);
	var_RefractPosB = mvp * var_RefractPosB;
}